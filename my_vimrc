" My settings

" change the mapleader from \ to ,
let mapleader=","

filetype plugin on
set hidden

" save session
nnoremap <leader>s :mksession<CR>
" vim -S to reopen session

" Showing line numbers and length
set relativenumber
set number          " Show line numbers
set tw=79           " width of document
set nowrap          " don't automatically wrap on load
set fo-=t           " don't automatically wrap text when typing
set colorcolumn=80
highlight ColorColumn ctermbg=233
set cursorline      " Highlight current line
set wildmenu        " visual autocomplete for command menu

" faster redrawing
set ttyfast

" Real programmers don't use TABs but spaces
set tabstop=4       " a tab is four spaces
set softtabstop=4
set shiftwidth=4    " number of spaces to use for autoindenting
set shiftround      " use multiple of shiftwidth when indenting with '<' and '>'
set expandtab       " replace tab with spaces
                    " Use <C-v>TAB to insert a tab
" set smarttab        " insert tabs on the start of a line according to
                    "   shiftwidth, not tabstop
" autocmd filetype python set expandtab

" remove extra whitespace
nmap <leader><space> :%s/\s\+$<cr>

" Code Folding
set foldmethod=indent   " fold based on indent level"
set foldnestmax=10      " 10 nested fold max"
set nofoldenable          " don't fold by defaultenable folding"
" set foldlevel=1
set foldlevelstart=10   " open most folds by default
" nnoremap <space> za   " space open/closes folds

" Highlight trailing whitespaces
set list
set listchars=tab:>.,trail:.,extends:#,nbsp:.
autocmd filetype html,xml set listchars-=tab:>.
                    " disable trailing highlits for html files
" autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red

" Code Indentation
set backspace=indent,eol,start
                    " allow backspacing over everything in insert mode
set autoindent      " always set autoindenting on
set copyindent      " copy the previous indentation on autoindenting
set pastetoggle=<F2>
                    " <C-r>+ to paste right from the OS paste 
                    " Toggle to pase mode when copy pasting

set title " set terminal title

" Search settings
set showmatch     " set show matching parenthesis
set ignorecase    " ignore case when searching
set smartcase     " ignore case if search pattern is all lowercase,
                    "    case-sensitive otherwise
set hlsearch      " highlight search terms
set incsearch     " show search matches as you type

" Undo-Redo-History
set history=1000         " remember more commands and search history
set undolevels=1000      " use many muchos levels of undo
set wildignore=*.swp,*.bak,*.pyc,*.class
set title                " change the terminal's title
set visualbell           " don't beep
set noerrorbells         " don't beep

" Easy window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
" gt gT to shift between tabs


" Write backups to /tmp
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup


" Vim-Plug Starts
call plug#begin('~/.vim/plugged')

" Color schemes
set t_Co=256
set background=dark
syntax enable
Plug 'sickill/vim-monokai', { 'do': 'mkdir -p ~/.vim/colors/ 
        \ && cp ~/.vim/plugged/vim-monokai/colors/monokai.vim ~/.vim/colors/' }
try
    colorscheme monokai
catch
    " theme missing
endtry

" File Navigation

" CtrlP
Plug 'ctrlp.vim'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc
let g:ctrlp_switch_buffer=0   " Open files in new buffer
let g:ctrlp_working_path_mode=0
" <C-v>: Split vertical <C-x>: Split cross <C-t>: New Tab
" <C-v> <C-b>: Switch between modes
" <C-z> <C-o>: Select multple and open multiple

" NerdTree
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs' "Show only one tree for all tabs
let NERDTreeIgnore = ['\.pyc$','\.jar$']
map <F5> :NERDTreeTabsToggle<CR>
" expand to the path of the file in the current buffer
nmap <silent> <leader>y :NERDTreeFind<cr>
set splitright
set splitbelow
" <S-t>: open file in new tab, s: open file in new split
Plug 'ryanoasis/vim-webdevicons'      " Intresting icon set
" Plug 'Xuyuanp/nerdtree-git-plugin'    " git status in NERDTree

" Search files
" Plug 'mileszs/ack.vim'
" Plug 'rking/ag.vim' " ag faster than ack
" Plug 'ggreer/the_silver_searcher'


" Powerline bar for vim
Plug 'bling/vim-airline'
set laststatus=2
let g:airline_powerline_fonts=1
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#tabline#left_sep=' '
let g:airline#extensions#tabline#left_alt_sep='|'
" let g:airline_theme='base16'


" Coding Made Easy

" CTags
Plug 'majutsushi/tagbar'
let g:tagbar_usearrows=1
nnoremap <leader>l :TagbarToggle<CR>

Plug 'jiangmiao/auto-pairs'     " Automatic closing of quotes, parenthesis, brackets, etc.
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'
                                " highlight conflicts
Plug 'tomtom/tcomment_vim'      " Toggle Comment for multiple lines
                                " gcc to toggle comment


" Auto completion

" Plug 'Shougo/neocomplete.vim'

" Textual sinpets
Plug 'garbas/vim-snipmate'
Plug 'marcweber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'

" Python
Plug 'davidhalter/jedi-vim', {'do': 'sudo pip install jedi'}
" let g:jedi#use_tabs_not_buffers = 0
" let g:jedi#use_splits_not_buffers = 'left'

" JavaScript / Node.js
" Plug 'marijnh/tern_for_vim', {'do': 'npm install'}
" let g:tern_map_keys=1
" let g:tern_show_argument_hints='on_move'
" Plug 'othree/javascript-libraries-syntax.vim'   " JS Libreries
" let g:used_javascript_libs = 'underscore,jquery'
" Plug 'jamescarr/snipmate-nodejs'
" Plug 'moll/vim-node'
" Plug 'ahayman/vim-nodejs-complete'

" HTML tags
Plug 'alvan/vim-closetag'
Plug 'jwhitley/vim-matchit'         " Matching tag close using %
" Plug 'mattn/emmet-vim'


" Syntax Checker
Plug 'scrooloose/syntastic', {'for': 'python,javascript',
                \ 'do': 'sudo pip install pyflakes && sudo npm install -g jshint'}
let g:syntastic_python_checkers = ['pyflakes']  " Python
let g:syntastic_javascript_checkers = ['jshint']  " Javasciprt

" Syntax highlighting
" Plug 'pangloss/vim-javascript'
" let g:javascript_enable_domhtmlcss=1
" Plug 'jelera/vim-javascript-syntax'
" au FileType javascript call JavaScriptFold()
" Plug 'othree/yajs.vim'
" Plug 'hdima/python-syntax'

" Utilities

" Plug 'vim-scripts/TaskList.vim'
" Plug 'vim-scripts/ZoomWin'
" Plug  'sjl/gundo.vim'
Plug 'mhinz/vim-signify'        " diff for VCS
Plug 'terryma/vim-multiple-cursors'
" Plug 'Lokaltog/vim-easymotion'
Plug 'junegunn/goyo.vim'        " Distraction-free writing in Vim

Plug 'Yggdroot/indentLine'
" Plug 'nathanaelkane/vim-indent-guides'
                                " Highlight indentation lines
" let g:indent_guides_start_level=2
" let g:indent_guides_guide_size=1
" let g:indent_guides_auto_colors = 0
" autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=3
" autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4
" <leader>ig : toggle


call plug#end()

